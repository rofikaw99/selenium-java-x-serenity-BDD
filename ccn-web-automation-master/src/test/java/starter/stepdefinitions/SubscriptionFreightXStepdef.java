package starter.stepdefinitions;

import io.cucumber.java.en.And;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import net.thucydides.core.annotations.Steps;
import org.json.JSONArray;
import org.json.JSONObject;
import org.openqa.selenium.Cookie;
import starter.pages.*;
import starter.registerv2.api.CreateRegisterV2;
import starter.registerv2.api.GetRegisteredAllUsersV2;
import starter.registerv2.api.GetRegisteredByMailV2;
import starter.registerv2.api.PUTIdentityLINC;
import starter.utlis.Constants;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URI;
import java.nio.file.Files;
import java.nio.file.Paths;

import static net.serenitybdd.core.Serenity.getDriver;


public class SubscriptionFreightXStepdef {
    private int waitResponse = 5000;
    @Steps
    LoginPage loginPage;

    @Steps
    GoToUrl goToUrl;

    @Given("the user has successfully subscribed to {string} {string}")
    public void the_user_has_successfully_subscribed_freightX_to(String plan, String email) throws InterruptedException, IOException {
        // Execute the Playwright login script
        try {
            Process process = Runtime.getRuntime().exec("node scripts/login.js");
            int exitCode = process.waitFor();
            if (exitCode != 0) {
                System.err.println("login.js failed with exit code: " + exitCode);
                new BufferedReader(new InputStreamReader(process.getErrorStream()))
                        .lines()
                        .forEach(System.err::println);
            }
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        }

        // Read cookies generated by Playwright
        String json = Files.readString(Paths.get("auth-cookies.json"));
        JSONArray cookies = new JSONArray(json);

        // Open the target domain so Selenium can associate cookies
        getDriver().get(Constants.URL_MAIN_WEB);

        // Inject cookies that match the current domain
        String currentDomain = URI.create(getDriver().getCurrentUrl()).getHost();
        for (int i = 0; i < cookies.length(); i++) {
            JSONObject ck = cookies.getJSONObject(i);
            String cookieDomain = ck.getString("domain").replaceFirst("^\\.", "");

            if (currentDomain.equals(cookieDomain)) {
                Cookie seleniumCookie = new Cookie.Builder(ck.getString("name"), ck.getString("value"))
                        .domain(cookieDomain)
                        .path(ck.getString("path"))
                        .isSecure(ck.optBoolean("secure", false))
                        .build();
                getDriver().manage().addCookie(seleniumCookie);
            } else {
                System.out.println("Skipping cookie due to domain mismatch: " + cookieDomain);
            }
        }

        // Navigate to a protected page to validate authentication
        getDriver().navigate().to(Constants.URL_MAIN_WEB);

        // Optional: Print current URL for debugging
        System.out.println("Current URL after authentication: " + getDriver().getCurrentUrl());
        loginPage.pressBtnLoginInit();
        Thread.sleep(2500);
        loginPage.inputEmailLogin(email);
        loginPage.inputPasswordLogin(Constants.PASSWORD);
        Thread.sleep(3000);
        loginPage.pressSignIn();
        Thread.sleep(7000);
    }

    @Then("the subscription entry should show:")
    public void theSubscriptionEntryShouldShow() {
        
    }

    @And("the subscription should include:")
    public void theSubscriptionShouldInclude() {

    }

    @Given("the user selects {string} as the subscription plan")
    public void theUserSelectsAsTheSubscriptionPlan(String arg0) throws InterruptedException {
        goToUrl.goToAbsUrl(Constants.URL_FreightX_CURRENT);
        Thread.sleep(3000);
    }
}
